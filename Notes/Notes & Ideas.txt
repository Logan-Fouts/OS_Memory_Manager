 The Data Structure
 ~~~~~~~~~~~~~~~~~~~~
* RAM
 - Nothing more than just an arraylist of byte objects
 - Bytes are empty arrays of length 8
* Bytes
 - ID
 - Allocation status
 - Memory table will hold info about the memory block associated to it from the ID.
* Memory Table
 - Arraylist of page entry objects
 - Only add to the table when a new memory block is allocated (starts empty)
* Page Entries
 - ID (associated with start byte of a  memory block)
 - Start address
 - End byte address
* Errors
 - ArrayList of errors
 - Instruction type that it failed on
 - The index of the command that failed from the uinput file
 - Either the size of largest block of memory or the state if the allocation of the id failed previously.
 - The id of the failed command from the instuction.

Algorithms
~~~~~~~~~~~~~~~~~~~~
 Allocation
 ~~~~~~~
* First set the first byte to have ID from the instruction
* Create a new page entry with the same ID and set the start and end address
* Use the start address from the fit algorithm and loop through memory setting all bytes to allocated stop at the end address.

 Deallocation
 ~~~~~~~
* First set the first byte to have ID of -1
* Use the start address from the page table to loop through the memory setting all bytes to unallocated stop and end address.
* Remove page entry

 Compaction
 ~~~~~~~
* Loop through memory and find first unallocated byte. (This should be the new start address)
* Loop and find the first allocated byte starting and the unallocated byte + 1. (This will be the block to move)
* Find the correct entry in the page table.
* Clear out that block of memory from its original spot. (Set id to -1 and allocated to false)
* Allocate the new block for that memory. (Start address from loop 1 --> End address derived from memory table)
* Update page table entry with new start and end addresses.  

 FirstFit
 ~~~~~~~
 * Loop through memory and find the first open byte
  - Loop starting from the byte found from above and check if the size is big enough
   * If the size is big enough call allocate function else continue looping
 * If no spot found is big enough print error

 BestFit
 ~~~~~~~
 * Loop through memory and add each hole found to a new ArrayList<page_entries> freeBlocks
 * Loop through freeBlocks and find the block with the closest size to the instruction size
 * Allocate the block found to be (closest) in size to the instruction
 * Else no spot was big enough, print error

 WorstFit
 ~~~~~~~
 * Loop through memory and add each hole found to a new ArrayList<page_entries> freeBlocks
 * Loop through freeBlocks and find the block with the closest size to the instruction size
 * Allocate the block found to be (farthest) in size to the instruction
 * Else no spot was big enough, print error